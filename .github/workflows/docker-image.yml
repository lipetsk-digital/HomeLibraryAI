name: Build, Push to GHCR and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  # Формат: ghcr.io/OWNER/REPO-NAME/IMAGE-NAME
  IMAGE_NAME: ghcr.io/${{ github.repository }}/homelibrary-tgbot

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=
          type=ref,event=branch
          latest

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
          

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          # Логинимся в GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin ${{ env.REGISTRY }}
          
          # Пуллим последний образ
          docker pull ${{ env.IMAGE_NAME }}:latest
          
          # Останавливаем и удаляем старый контейнер
          docker stop helloworld-app || true
          docker rm helloworld-app || true
          
          # Запускаем новый контейнер
          docker run -d \
            --name helloworld-app \
            --restart always \
            -p 8000:8000 \
            ${{ env.IMAGE_NAME }}:latest
          
          # Очищаем старые образы для экономии места
          docker image prune -f