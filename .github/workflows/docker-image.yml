name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.REGISTRY_HOST }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.REGISTRY_HOST }}/stkorn/homelibrary-bot:latest
          ${{ secrets.REGISTRY_HOST }}/stkorn/homelibrary-bot:${{ github.sha }}
          

  deploy:
      needs: [build-and-push]
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: Deploy to cluster
        run: |
          kubectl create secret generic homelibrary-bot-secrets \
            --from-literal=telegram-token=${{ secrets.TELEGRAM_TOKEN }} \
            --from-literal=postgres-host=${{ secrets.POSTGRES_HOST }} \
            --from-literal=postgres-port=${{ secrets.POSTGRES_PORT }} \
            --from-literal=postgres-database=${{ secrets.POSTGRES_DATABASE }} \
            --from-literal=postgres-username=${{ secrets.POSTGRES_USERNAME }} \
            --from-literal=postgres-password=${{ secrets.POSTGRES_PASSWORD }} \
            --from-literal=aws-access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=aws-secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --from-literal=aws-endpoint-url=${{ secrets.AWS_ENDPOINT_URL }} \
            --from-literal=aws-bucket-name=${{ secrets.AWS_BUCKET_NAME }} \
            --from-literal=gpt-url=${{ secrets.GPT_URL }} \
            --from-literal=gpt-api-token=${{ secrets.GPT_API_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f deployment.yaml
          kubectl rollout restart deployment/homelibrary-bot